// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/CudoVentures/tokenised-infrastructure-rewarder/internal/app/tokenised-infrastructure-rewarder/types"
	"github.com/btcsuite/btcd/rpcclient"
	"github.com/jmoiron/sqlx"
	"sync"
)

// Ensure, that ApiRequesterMock does implement ApiRequester.
// If this is not the case, regenerate this file with moq.
var _ ApiRequester = &ApiRequesterMock{}

// ApiRequesterMock is a mock implementation of ApiRequester.
//
//	func TestSomethingThatUsesApiRequester(t *testing.T) {
//
//		// make and configure a mocked ApiRequester
//		mockedApiRequester := &ApiRequesterMock{
//			GetFarmCollectionWithNFTsFunc: func(denomIds []string) ([]types.Collection, error) {
//				panic("mock out the GetFarmCollectionWithNFTs method")
//			},
//			GetFarmCollectionsFromHasuraFunc: func(farmId string) (types.CollectionData, error) {
//				panic("mock out the GetFarmCollectionsFromHasura method")
//			},
//			GetFarmTotalHashPowerFromPoolTodayFunc: func(farmName string, sinceTimestamp string) (float64, error) {
//				panic("mock out the GetFarmTotalHashPowerFromPoolToday method")
//			},
//			GetFarmsFunc: func() ([]types.Farm, error) {
//				panic("mock out the GetFarms method")
//			},
//			GetNftTransferHistoryFunc: func(collectionDenomId string, nftId string, fromTimestamp int64) (types.NftTransferHistory, error) {
//				panic("mock out the GetNftTransferHistory method")
//			},
//			GetPayoutAddressFromNodeFunc: func(cudosAddress string, network string, tokenId string, denomId string) (string, error) {
//				panic("mock out the GetPayoutAddressFromNode method")
//			},
//			VerifyCollectionFunc: func(denomId string) (bool, error) {
//				panic("mock out the VerifyCollection method")
//			},
//		}
//
//		// use mockedApiRequester in code that requires ApiRequester
//		// and then make assertions.
//
//	}
type ApiRequesterMock struct {
	// GetFarmCollectionWithNFTsFunc mocks the GetFarmCollectionWithNFTs method.
	GetFarmCollectionWithNFTsFunc func(denomIds []string) ([]types.Collection, error)

	// GetFarmCollectionsFromHasuraFunc mocks the GetFarmCollectionsFromHasura method.
	GetFarmCollectionsFromHasuraFunc func(farmId string) (types.CollectionData, error)

	// GetFarmTotalHashPowerFromPoolTodayFunc mocks the GetFarmTotalHashPowerFromPoolToday method.
	GetFarmTotalHashPowerFromPoolTodayFunc func(farmName string, sinceTimestamp string) (float64, error)

	// GetFarmsFunc mocks the GetFarms method.
	GetFarmsFunc func() ([]types.Farm, error)

	// GetNftTransferHistoryFunc mocks the GetNftTransferHistory method.
	GetNftTransferHistoryFunc func(collectionDenomId string, nftId string, fromTimestamp int64) (types.NftTransferHistory, error)

	// GetPayoutAddressFromNodeFunc mocks the GetPayoutAddressFromNode method.
	GetPayoutAddressFromNodeFunc func(cudosAddress string, network string, tokenId string, denomId string) (string, error)

	// VerifyCollectionFunc mocks the VerifyCollection method.
	VerifyCollectionFunc func(denomId string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetFarmCollectionWithNFTs holds details about calls to the GetFarmCollectionWithNFTs method.
		GetFarmCollectionWithNFTs []struct {
			// DenomIds is the denomIds argument value.
			DenomIds []string
		}
		// GetFarmCollectionsFromHasura holds details about calls to the GetFarmCollectionsFromHasura method.
		GetFarmCollectionsFromHasura []struct {
			// FarmId is the farmId argument value.
			FarmId string
		}
		// GetFarmTotalHashPowerFromPoolToday holds details about calls to the GetFarmTotalHashPowerFromPoolToday method.
		GetFarmTotalHashPowerFromPoolToday []struct {
			// FarmName is the farmName argument value.
			FarmName string
			// SinceTimestamp is the sinceTimestamp argument value.
			SinceTimestamp string
		}
		// GetFarms holds details about calls to the GetFarms method.
		GetFarms []struct {
		}
		// GetNftTransferHistory holds details about calls to the GetNftTransferHistory method.
		GetNftTransferHistory []struct {
			// CollectionDenomId is the collectionDenomId argument value.
			CollectionDenomId string
			// NftId is the nftId argument value.
			NftId string
			// FromTimestamp is the fromTimestamp argument value.
			FromTimestamp int64
		}
		// GetPayoutAddressFromNode holds details about calls to the GetPayoutAddressFromNode method.
		GetPayoutAddressFromNode []struct {
			// CudosAddress is the cudosAddress argument value.
			CudosAddress string
			// Network is the network argument value.
			Network string
			// TokenId is the tokenId argument value.
			TokenId string
			// DenomId is the denomId argument value.
			DenomId string
		}
		// VerifyCollection holds details about calls to the VerifyCollection method.
		VerifyCollection []struct {
			// DenomId is the denomId argument value.
			DenomId string
		}
	}
	lockGetFarmCollectionWithNFTs          sync.RWMutex
	lockGetFarmCollectionsFromHasura       sync.RWMutex
	lockGetFarmTotalHashPowerFromPoolToday sync.RWMutex
	lockGetFarms                           sync.RWMutex
	lockGetNftTransferHistory              sync.RWMutex
	lockGetPayoutAddressFromNode           sync.RWMutex
	lockVerifyCollection                   sync.RWMutex
}

// GetFarmCollectionWithNFTs calls GetFarmCollectionWithNFTsFunc.
func (mock *ApiRequesterMock) GetFarmCollectionWithNFTs(denomIds []string) ([]types.Collection, error) {
	if mock.GetFarmCollectionWithNFTsFunc == nil {
		panic("ApiRequesterMock.GetFarmCollectionWithNFTsFunc: method is nil but ApiRequester.GetFarmCollectionWithNFTs was just called")
	}
	callInfo := struct {
		DenomIds []string
	}{
		DenomIds: denomIds,
	}
	mock.lockGetFarmCollectionWithNFTs.Lock()
	mock.calls.GetFarmCollectionWithNFTs = append(mock.calls.GetFarmCollectionWithNFTs, callInfo)
	mock.lockGetFarmCollectionWithNFTs.Unlock()
	return mock.GetFarmCollectionWithNFTsFunc(denomIds)
}

// GetFarmCollectionWithNFTsCalls gets all the calls that were made to GetFarmCollectionWithNFTs.
// Check the length with:
//
//	len(mockedApiRequester.GetFarmCollectionWithNFTsCalls())
func (mock *ApiRequesterMock) GetFarmCollectionWithNFTsCalls() []struct {
	DenomIds []string
} {
	var calls []struct {
		DenomIds []string
	}
	mock.lockGetFarmCollectionWithNFTs.RLock()
	calls = mock.calls.GetFarmCollectionWithNFTs
	mock.lockGetFarmCollectionWithNFTs.RUnlock()
	return calls
}

// GetFarmCollectionsFromHasura calls GetFarmCollectionsFromHasuraFunc.
func (mock *ApiRequesterMock) GetFarmCollectionsFromHasura(farmId string) (types.CollectionData, error) {
	if mock.GetFarmCollectionsFromHasuraFunc == nil {
		panic("ApiRequesterMock.GetFarmCollectionsFromHasuraFunc: method is nil but ApiRequester.GetFarmCollectionsFromHasura was just called")
	}
	callInfo := struct {
		FarmId string
	}{
		FarmId: farmId,
	}
	mock.lockGetFarmCollectionsFromHasura.Lock()
	mock.calls.GetFarmCollectionsFromHasura = append(mock.calls.GetFarmCollectionsFromHasura, callInfo)
	mock.lockGetFarmCollectionsFromHasura.Unlock()
	return mock.GetFarmCollectionsFromHasuraFunc(farmId)
}

// GetFarmCollectionsFromHasuraCalls gets all the calls that were made to GetFarmCollectionsFromHasura.
// Check the length with:
//
//	len(mockedApiRequester.GetFarmCollectionsFromHasuraCalls())
func (mock *ApiRequesterMock) GetFarmCollectionsFromHasuraCalls() []struct {
	FarmId string
} {
	var calls []struct {
		FarmId string
	}
	mock.lockGetFarmCollectionsFromHasura.RLock()
	calls = mock.calls.GetFarmCollectionsFromHasura
	mock.lockGetFarmCollectionsFromHasura.RUnlock()
	return calls
}

// GetFarmTotalHashPowerFromPoolToday calls GetFarmTotalHashPowerFromPoolTodayFunc.
func (mock *ApiRequesterMock) GetFarmTotalHashPowerFromPoolToday(farmName string, sinceTimestamp string) (float64, error) {
	if mock.GetFarmTotalHashPowerFromPoolTodayFunc == nil {
		panic("ApiRequesterMock.GetFarmTotalHashPowerFromPoolTodayFunc: method is nil but ApiRequester.GetFarmTotalHashPowerFromPoolToday was just called")
	}
	callInfo := struct {
		FarmName       string
		SinceTimestamp string
	}{
		FarmName:       farmName,
		SinceTimestamp: sinceTimestamp,
	}
	mock.lockGetFarmTotalHashPowerFromPoolToday.Lock()
	mock.calls.GetFarmTotalHashPowerFromPoolToday = append(mock.calls.GetFarmTotalHashPowerFromPoolToday, callInfo)
	mock.lockGetFarmTotalHashPowerFromPoolToday.Unlock()
	return mock.GetFarmTotalHashPowerFromPoolTodayFunc(farmName, sinceTimestamp)
}

// GetFarmTotalHashPowerFromPoolTodayCalls gets all the calls that were made to GetFarmTotalHashPowerFromPoolToday.
// Check the length with:
//
//	len(mockedApiRequester.GetFarmTotalHashPowerFromPoolTodayCalls())
func (mock *ApiRequesterMock) GetFarmTotalHashPowerFromPoolTodayCalls() []struct {
	FarmName       string
	SinceTimestamp string
} {
	var calls []struct {
		FarmName       string
		SinceTimestamp string
	}
	mock.lockGetFarmTotalHashPowerFromPoolToday.RLock()
	calls = mock.calls.GetFarmTotalHashPowerFromPoolToday
	mock.lockGetFarmTotalHashPowerFromPoolToday.RUnlock()
	return calls
}

// GetFarms calls GetFarmsFunc.
func (mock *ApiRequesterMock) GetFarms() ([]types.Farm, error) {
	if mock.GetFarmsFunc == nil {
		panic("ApiRequesterMock.GetFarmsFunc: method is nil but ApiRequester.GetFarms was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetFarms.Lock()
	mock.calls.GetFarms = append(mock.calls.GetFarms, callInfo)
	mock.lockGetFarms.Unlock()
	return mock.GetFarmsFunc()
}

// GetFarmsCalls gets all the calls that were made to GetFarms.
// Check the length with:
//
//	len(mockedApiRequester.GetFarmsCalls())
func (mock *ApiRequesterMock) GetFarmsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetFarms.RLock()
	calls = mock.calls.GetFarms
	mock.lockGetFarms.RUnlock()
	return calls
}

// GetNftTransferHistory calls GetNftTransferHistoryFunc.
func (mock *ApiRequesterMock) GetNftTransferHistory(collectionDenomId string, nftId string, fromTimestamp int64) (types.NftTransferHistory, error) {
	if mock.GetNftTransferHistoryFunc == nil {
		panic("ApiRequesterMock.GetNftTransferHistoryFunc: method is nil but ApiRequester.GetNftTransferHistory was just called")
	}
	callInfo := struct {
		CollectionDenomId string
		NftId             string
		FromTimestamp     int64
	}{
		CollectionDenomId: collectionDenomId,
		NftId:             nftId,
		FromTimestamp:     fromTimestamp,
	}
	mock.lockGetNftTransferHistory.Lock()
	mock.calls.GetNftTransferHistory = append(mock.calls.GetNftTransferHistory, callInfo)
	mock.lockGetNftTransferHistory.Unlock()
	return mock.GetNftTransferHistoryFunc(collectionDenomId, nftId, fromTimestamp)
}

// GetNftTransferHistoryCalls gets all the calls that were made to GetNftTransferHistory.
// Check the length with:
//
//	len(mockedApiRequester.GetNftTransferHistoryCalls())
func (mock *ApiRequesterMock) GetNftTransferHistoryCalls() []struct {
	CollectionDenomId string
	NftId             string
	FromTimestamp     int64
} {
	var calls []struct {
		CollectionDenomId string
		NftId             string
		FromTimestamp     int64
	}
	mock.lockGetNftTransferHistory.RLock()
	calls = mock.calls.GetNftTransferHistory
	mock.lockGetNftTransferHistory.RUnlock()
	return calls
}

// GetPayoutAddressFromNode calls GetPayoutAddressFromNodeFunc.
func (mock *ApiRequesterMock) GetPayoutAddressFromNode(cudosAddress string, network string, tokenId string, denomId string) (string, error) {
	if mock.GetPayoutAddressFromNodeFunc == nil {
		panic("ApiRequesterMock.GetPayoutAddressFromNodeFunc: method is nil but ApiRequester.GetPayoutAddressFromNode was just called")
	}
	callInfo := struct {
		CudosAddress string
		Network      string
		TokenId      string
		DenomId      string
	}{
		CudosAddress: cudosAddress,
		Network:      network,
		TokenId:      tokenId,
		DenomId:      denomId,
	}
	mock.lockGetPayoutAddressFromNode.Lock()
	mock.calls.GetPayoutAddressFromNode = append(mock.calls.GetPayoutAddressFromNode, callInfo)
	mock.lockGetPayoutAddressFromNode.Unlock()
	return mock.GetPayoutAddressFromNodeFunc(cudosAddress, network, tokenId, denomId)
}

// GetPayoutAddressFromNodeCalls gets all the calls that were made to GetPayoutAddressFromNode.
// Check the length with:
//
//	len(mockedApiRequester.GetPayoutAddressFromNodeCalls())
func (mock *ApiRequesterMock) GetPayoutAddressFromNodeCalls() []struct {
	CudosAddress string
	Network      string
	TokenId      string
	DenomId      string
} {
	var calls []struct {
		CudosAddress string
		Network      string
		TokenId      string
		DenomId      string
	}
	mock.lockGetPayoutAddressFromNode.RLock()
	calls = mock.calls.GetPayoutAddressFromNode
	mock.lockGetPayoutAddressFromNode.RUnlock()
	return calls
}

// VerifyCollection calls VerifyCollectionFunc.
func (mock *ApiRequesterMock) VerifyCollection(denomId string) (bool, error) {
	if mock.VerifyCollectionFunc == nil {
		panic("ApiRequesterMock.VerifyCollectionFunc: method is nil but ApiRequester.VerifyCollection was just called")
	}
	callInfo := struct {
		DenomId string
	}{
		DenomId: denomId,
	}
	mock.lockVerifyCollection.Lock()
	mock.calls.VerifyCollection = append(mock.calls.VerifyCollection, callInfo)
	mock.lockVerifyCollection.Unlock()
	return mock.VerifyCollectionFunc(denomId)
}

// VerifyCollectionCalls gets all the calls that were made to VerifyCollection.
// Check the length with:
//
//	len(mockedApiRequester.VerifyCollectionCalls())
func (mock *ApiRequesterMock) VerifyCollectionCalls() []struct {
	DenomId string
} {
	var calls []struct {
		DenomId string
	}
	mock.lockVerifyCollection.RLock()
	calls = mock.calls.VerifyCollection
	mock.lockVerifyCollection.RUnlock()
	return calls
}

// Ensure, that ProviderMock does implement Provider.
// If this is not the case, regenerate this file with moq.
var _ Provider = &ProviderMock{}

// ProviderMock is a mock implementation of Provider.
//
//	func TestSomethingThatUsesProvider(t *testing.T) {
//
//		// make and configure a mocked Provider
//		mockedProvider := &ProviderMock{
//			InitBtcRpcClientFunc: func() (*rpcclient.Client, error) {
//				panic("mock out the InitBtcRpcClient method")
//			},
//			InitDBConnectionFunc: func() (*sqlx.DB, error) {
//				panic("mock out the InitDBConnection method")
//			},
//		}
//
//		// use mockedProvider in code that requires Provider
//		// and then make assertions.
//
//	}
type ProviderMock struct {
	// InitBtcRpcClientFunc mocks the InitBtcRpcClient method.
	InitBtcRpcClientFunc func() (*rpcclient.Client, error)

	// InitDBConnectionFunc mocks the InitDBConnection method.
	InitDBConnectionFunc func() (*sqlx.DB, error)

	// calls tracks calls to the methods.
	calls struct {
		// InitBtcRpcClient holds details about calls to the InitBtcRpcClient method.
		InitBtcRpcClient []struct {
		}
		// InitDBConnection holds details about calls to the InitDBConnection method.
		InitDBConnection []struct {
		}
	}
	lockInitBtcRpcClient sync.RWMutex
	lockInitDBConnection sync.RWMutex
}

// InitBtcRpcClient calls InitBtcRpcClientFunc.
func (mock *ProviderMock) InitBtcRpcClient() (*rpcclient.Client, error) {
	if mock.InitBtcRpcClientFunc == nil {
		panic("ProviderMock.InitBtcRpcClientFunc: method is nil but Provider.InitBtcRpcClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInitBtcRpcClient.Lock()
	mock.calls.InitBtcRpcClient = append(mock.calls.InitBtcRpcClient, callInfo)
	mock.lockInitBtcRpcClient.Unlock()
	return mock.InitBtcRpcClientFunc()
}

// InitBtcRpcClientCalls gets all the calls that were made to InitBtcRpcClient.
// Check the length with:
//
//	len(mockedProvider.InitBtcRpcClientCalls())
func (mock *ProviderMock) InitBtcRpcClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInitBtcRpcClient.RLock()
	calls = mock.calls.InitBtcRpcClient
	mock.lockInitBtcRpcClient.RUnlock()
	return calls
}

// InitDBConnection calls InitDBConnectionFunc.
func (mock *ProviderMock) InitDBConnection() (*sqlx.DB, error) {
	if mock.InitDBConnectionFunc == nil {
		panic("ProviderMock.InitDBConnectionFunc: method is nil but Provider.InitDBConnection was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInitDBConnection.Lock()
	mock.calls.InitDBConnection = append(mock.calls.InitDBConnection, callInfo)
	mock.lockInitDBConnection.Unlock()
	return mock.InitDBConnectionFunc()
}

// InitDBConnectionCalls gets all the calls that were made to InitDBConnection.
// Check the length with:
//
//	len(mockedProvider.InitDBConnectionCalls())
func (mock *ProviderMock) InitDBConnectionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInitDBConnection.RLock()
	calls = mock.calls.InitDBConnection
	mock.lockInitDBConnection.RUnlock()
	return calls
}
